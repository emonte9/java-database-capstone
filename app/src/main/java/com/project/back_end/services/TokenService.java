package com.project.back_end.services;

import java.nio.charset.StandardCharsets;
import java.time.Instant;
import java.util.Date;

import javax.crypto.SecretKey;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import com.project.back_end.repo.AdminRepository;
import com.project.back_end.repo.DoctorRepository;
import com.project.back_end.repo.PatientRepository;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.JwtException;
import io.jsonwebtoken.JwtParser;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import jakarta.annotation.PostConstruct;

@Component
public class TokenService {
// 1. **@Component Annotation**
// The @Component annotation marks this class as a Spring component, meaning Spring will manage it as a bean within its application context.
// This allows the class to be injected into other Spring-managed components (like services or controllers) where it's needed.

// 2. **Constructor Injection for Dependencies**
// The constructor injects dependencies for `AdminRepository`, `DoctorRepository`, and `PatientRepository`,
// allowing the service to interact with the database and validate users based on their role (admin, doctor, or patient).
// Constructor injection ensures that the class is initialized with all required dependencies, promoting immutability and making the class testable.

// 3. **getSigningKey Method**
// This method retrieves the HMAC SHA key used to sign JWT tokens.
// It uses the `jwt.secret` value, which is provided from an external source (like application properties).
// The `Keys.hmacShaKeyFor()` method converts the secret key string into a valid `SecretKey` for signing and verification of JWTs.

// 4. **generateToken Method**
// This method generates a JWT token for a user based on their email.
// - The `subject` of the token is set to the user's email, which is used as an identifier.
// - The `issuedAt` is set to the current date and time.
// - The `expiration` is set to 7 days from the issue date, ensuring the token expires after one week.
// - The token is signed using the signing key generated by `getSigningKey()`, making it secure and tamper-proof.
// The method returns the JWT token as a string.

// 5. **extractEmail Method**
// This method extracts the user's email (subject) from the provided JWT token.
// - The token is first verified using the signing key to ensure it hasn’t been tampered with.
// - After verification, the token is parsed, and the subject (which represents the email) is extracted.
// This method allows the application to retrieve the user's identity (email) from the token for further use.

// 6. **validateToken Method**
// This method validates whether a provided JWT token is valid for a specific user role (admin, doctor, or patient).
// - It first extracts the email from the token using the `extractEmail()` method.
// - Depending on the role (`admin`, `doctor`, or `patient`), it checks the corresponding repository (AdminRepository, DoctorRepository, or PatientRepository)
//   to see if a user with the extracted email exists.
// - If a match is found for the specified user role, it returns true, indicating the token is valid.
// - If the role or user does not exist, it returns false, indicating the token is invalid.
// - The method gracefully handles any errors by returning false if the token is invalid or an exception occurs.
// This ensures secure access control based on the user's role and their existence in the system.


    private final AdminRepository adminRepository;
    private final DoctorRepository doctorRepository;
    private final PatientRepository patientRepository;

    @Value("${jwt.secret}")
    private String jwtSecret;

    private SecretKey secretKey;
    private JwtParser jwtParser;

    public TokenService(AdminRepository adminRepository,
                        DoctorRepository doctorRepository,
                        PatientRepository patientRepository) {
        this.adminRepository = adminRepository;
        this.doctorRepository = doctorRepository;
        this.patientRepository = patientRepository;
    }

    // @PostConstruct
    // private void initKey() {
    //     this.secretKey = Keys.hmacShaKeyFor(jwtSecret.getBytes(StandardCharsets.UTF_8));
    // }


//       @PostConstruct
//   private void init() {
//     // Decode base64 (if you stored secret as Base64) or raw bytes
//     byte[] keyBytes = jwtSecret.getBytes(StandardCharsets.UTF_8);
//     this.secretKey = Keys.hmacShaKeyFor(keyBytes);
//   }
@PostConstruct
private void init() {
    byte[] keyBytes = jwtSecret.getBytes(StandardCharsets.UTF_8);
    this.secretKey = Keys.hmacShaKeyFor(keyBytes);

     // Back in 0.11.5, parser() still exists
    this.jwtParser = Jwts
        .parser()              // ← must use parserBuilder()
        .verifyWith(secretKey)        // ← replaces setSigningKey(...)
        //.decryptWith(decryptionKey)   // ← optional, only for encrypted JWTs
        .build();
}

    // public String generateToken(String identifier, String role) {
    //     Instant now = Instant.now();
    //     Instant expiry = now.plusSeconds(7 * 24 * 60 * 60); // 7 days

    //     JwtBuilder builder = Jwts.builder()
    //             .subject(identifier)
    //             .claim("role", role)
    //             .issuedAt(Date.from(now))
    //             .expiration(Date.from(expiry))
    //             .signWith(secretKey);

    //     return builder.compact();
    // }

    /**
   * Generate a JWT with subject=identifier and a 'role' claim.
   * Expires in 7 days.
   */
 public String generateToken(String identifier, String role) {
    Instant now    = Instant.now();
    Instant expiry = now.plusSeconds(7 * 24 * 3600);

    return Jwts.builder()
        // replace setSubject(...) with subject(...)
        .subject(identifier)

        .claim("role", role)

        // replace setIssuedAt(...) with issuedAt(...)
        .issuedAt(Date.from(now))

        // replace setExpiration(...) with expiration(...)
        .expiration(Date.from(expiry))

        // drop the SignatureAlgorithm arg; 
        // the HS256 algorithm will be inferred from the SecretKey
        .signWith(secretKey)

        .compact();
}


 private Claims parseToken(String token) throws JwtException {
        return jwtParser
                .parseSignedClaims(token)
                .getPayload();
    }

//      public String extractIdentifier(String token) {
//     Claims claims = parseToken(token);
//     return claims.getSubject();
//   }

 public String extractIdentifier(String token) {
        return parseToken(token).getSubject();
    }


    // public String extractIdentifier(String token) {
    //     Claims claims = Jwts.parser()
    //             .verifyWith(secretKey)
    //             .build()
    //             .parseSignedClaims(token)
    //             .getPayload();

    //     return claims.getSubject();
    // }




    // check below
     
    // 3. Validate Token for a given role (admin, doctor, patient)
    // public boolean validateToken(String token, String role) {
    //     try {
    //         String identifier = extractIdentifier(token);

    //         return switch (role.toLowerCase()) {
    //             case "admin" -> adminRepository.findByUsername(identifier) != null;
    //             case "doctor" -> doctorRepository.findByEmail(identifier) != null;
    //             case "patient" -> patientRepository.findByEmail(identifier) != null;
    //             default -> false;
    //         };
    //     } catch (Exception e) {
    //         return false;
    //     }
    // }


   public boolean validateToken(String token, String role) {
        try {
            Claims claims = parseToken(token);
            String id     = claims.getSubject();

            return switch (role.toLowerCase()) {
                case "admin"  -> adminRepository.findByUsername(id) != null;
                case "doctor" -> doctorRepository.findByEmail(id)   != null;
                case "patient"-> patientRepository.findByEmail(id)  != null;
                default       -> false;
            };
        } catch (JwtException | IllegalArgumentException ex) {
            // malformed, expired, or signature invalid
            return false;
        }
    }


    @Value("${jwt.secret}")
    public SecretKey getSigningKey() {
        return Keys.hmacShaKeyFor(jwtSecret.getBytes(StandardCharsets.UTF_8));
    }


}